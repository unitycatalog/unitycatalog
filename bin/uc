#!/bin/bash

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"

TARBALL_JAR_DIR="$ROOT_DIR/jars"
CLI_CLASS_FILE="$ROOT_DIR/examples/cli/src/main/java/io/unitycatalog/cli/UnityCatalogCli.java"

# Use DEBUG env var to turn remote Java debugging (JDWP) on
# DEBUG is the port that the JDWP agent listens to
DEBUG_CMD=""
if [[ -n "$DEBUG" ]]; then
  echo "Remote Java debugging enabled on port $DEBUG"
  DEBUG_CMD="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:$DEBUG"
fi

# This function generates the unity catalog jars using sbt
generate_jar() {
  GENERATE_JAR_COMMAND="$ROOT_DIR/build/sbt -info clean package"
  echo "Running SBT to generate CLI JAR: $GENERATE_JAR_COMMAND"
  $GENERATE_JAR_COMMAND || exit
}

# This function runs the java command to run the CLI
run_cli_java_command() {
  CLI_JAVA_COMMAND="java $DEBUG_CMD -cp $(cat "$1") io.unitycatalog.cli.UnityCatalogCli"
  shift

  # Print the quoted arguments for debugging
  # echo "Quoted arguments: $quoted_args_str"
  # echo "Running command: $CLI_JAVA_COMMAND"
  $CLI_JAVA_COMMAND "$@"  || exit
}

# This function runs the CLI using the source code
run_in_source_code() {
  CLI_TARGET_DIR="$ROOT_DIR/examples/cli/target"
  CLI_JAR=$(find "$CLI_TARGET_DIR" -name "unitycatalog-cli-*.jar" | head -n 1)
  if [ -z "$CLI_JAR" ]; then
      echo "CLI JAR not found starting with 'unitycatalog-cli-*' in the target directory '$CLI_TARGET_DIR'."
      generate_jar
  fi

  CLI_CLASSPATH_FILE=$(find "$CLI_TARGET_DIR" -name "classpath" | head -n 1)
  if [ -z "$CLI_CLASSPATH_FILE" ]; then
      echo "No classpath file found in the target directory '$CLI_TARGET_DIR'."
      generate_jar
  fi

  run_cli_java_command "$CLI_CLASSPATH_FILE" "$@"
}

# This function runs the CLI using the tarball
run_in_tarball() {
  CLI_CLASSPATH_FILE=$(find "$TARBALL_JAR_DIR" -name "classpath" | head -n 1)

  run_cli_java_command "$CLI_CLASSPATH_FILE" "$@"
}

# Check if TARBALL_JAR_DIR exists, then we are running in the tarball
if [ -d "$TARBALL_JAR_DIR" ]; then
  run_in_tarball "$@"
# Check if CLI_TARGET_DIR exists, then we are running in the source code
elif [ -f "$CLI_CLASS_FILE" ]; then
  run_in_source_code "$@"
else
  echo "Script running neither in source code nor in tarball"
fi
