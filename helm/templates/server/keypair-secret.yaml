{{- if and .Values.server.enabled .Values.server.jwtKeypairSecret.create -}}
{{- $secretName := default (printf "%s-%s" (include "unitycatalog.server.fullname" .) "jwt-key") .Values.server.jwtKeypairSecret.name -}}
{{- $secret := lookup "v1" "Secret" .Release.Namespace $secretName -}}
{{- if not $secret -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName | quote }}
  labels: {{- include "unitycatalog.server.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/resource-policy: keep
type: Opaque
data:
  {{/*
      Generate RSA private-key for JWT signing
  */}}
  {{- $privateKeyPEM := genPrivateKey "rsa" }}
  {{/*
      Generate a random hex string for key_id as expected by SecurityConfiguration.java
      SecurityConfiguration.java uses SecureRandom to generate 32 random bytes and converts to hex
  */}}
  {{- $keyId := "" }}
  {{- range until 32 }}
  {{- $keyId = printf "%s%02x" $keyId (randInt 0 255) }}
  {{- end }}
  private_key.pem: {{ $privateKeyPEM | b64enc | quote }}
  key_id.txt: {{ $keyId | b64enc | quote }}
{{- else -}}
  {{- if and (not (hasKey $secret.data "private_key.pem")) (not (hasKey $secret.data "private_key.der")) }}
    {{- fail (printf "Secret '%s' is missing required key 'private_key.der'" $secretName) }}
  {{- end }}
  {{- if not (hasKey $secret.data "key_id.txt") }}
    {{- fail (printf "Secret '%s' is missing required key 'key_id.txt'" $secretName) }}
  {{- end }}
{{- end -}}
{{- end -}}
