/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/scim2/Users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List users
     * @description Gets details for all the users.
     *
     */
    get: operations['listUsers'];
    put?: never;
    /**
     * Create a user
     * @description Creates a new user.
     *
     */
    post: operations['createUser'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/scim2/Users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the user. */
        id: string;
      };
      cookie?: never;
    };
    /**
     * Get a user
     * @description Gets the specified user.
     *
     */
    get: operations['getUser'];
    /**
     * Update a user
     * @description Updates the user that matches the supplied id.
     *
     */
    put: operations['updateUser'];
    post?: never;
    /**
     * Delete a user
     * @description Deletes the user that matches the supplied id.
     *
     */
    delete: operations['deleteUser'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/scim2/Me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get the current user
     * @description Gets the user from the jwt token provided.
     *
     */
    get: operations['getSelf'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    User: {
      /** @description The unique identifier of the user. */
      id: string;
      /** @description The name of the user. */
      name: string;
      /** @description The email address of the user. */
      email: string;
      /** @description The external identifier of the user. */
      external_id?: string;
      /**
       * @description The state of the account.
       * @enum {string}
       */
      state?: UserState;
      /** @description The URL of the user's profile picture. */
      picture_url?: string;
      /**
       * Format: int64
       * @description The time the user was created.
       */
      created_at?: number;
      /**
       * Format: int64
       * @description The time the user was last updated.
       */
      updated_at?: number;
    };
    /** @description List of SCIM User resources. */
    UserResourceList: {
      /**
       * Format: int32
       * @description The total number of results.
       */
      totalResults?: number;
      /**
       * Format: int32
       * @description The number of items per page.
       */
      itemsPerPage?: number;
      /**
       * Format: int32
       * @description The index of the first result.
       */
      startIndex?: number;
      /** @description The list of User resources. */
      Resources?: components['schemas']['UserResource'][];
      /** @description User list id metadata. */
      id?: string;
      /** @description User list external id metadata. */
      externalId?: string;
      /** @description The metadata of the user. */
      meta?: {
        resourceType?: string;
        created?: string;
        lastModified?: string;
      };
    };
    /** @description SCIM provides a resource type for "User" resources. */
    UserResource: {
      /** @description The id of the user. */
      id?: string;
      /** @description The name of the user. */
      displayName?: string;
      /** @description The SCIM external id. */
      externalId?: string;
      /** @description E-mail addresses for the user. */
      emails?: components['schemas']['Email'][];
      /** @description The active status of the user. */
      active?: boolean;
      /** @description The metadata of the user. */
      meta?: {
        created?: string;
        lastModified?: string;
      };
      /** @description The photos of the user. */
      photos?: {
        /** @description The url of the user's photo. */
        value?: string;
      }[];
    };
    /** @description SCIM email for a user. */
    Email: {
      /** @description The email of the user. */
      value?: string;
      /** @description If the email is primary. */
      primary?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  listUsers: {
    parameters: {
      query?: {
        /** @description Query by which the results have to be filtered. */
        filter?: string;
        /** @description Specifies the index of the first result. First item is number 1. */
        startIndex?: number;
        /** @description Desired number of results per page. If no count is provided, it defaults to 50. */
        count?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The user list was successfully retrieved. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/scim+json': components['schemas']['UserResourceList'];
        };
      };
    };
  };
  createUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserResource'];
      };
    };
    responses: {
      /** @description The new user was successfully created. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/scim+json': components['schemas']['UserResource'];
        };
      };
    };
  };
  getUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the user. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The user was successfully retrieved. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/scim+json': components['schemas']['UserResource'];
        };
      };
    };
  };
  updateUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the user. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserResource'];
      };
    };
    responses: {
      /** @description The user was successfully updated. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/scim+json': components['schemas']['UserResource'];
        };
      };
    };
  };
  deleteUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the user. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The user was successfully deleted. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/scim+json': unknown;
        };
      };
    };
  };
  getSelf: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The user was successfully retrieved. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserResource'];
        };
      };
    };
  };
}
export enum UserState {
  ENABLED = 'ENABLED',
  DISABLED = 'DISABLED',
}
