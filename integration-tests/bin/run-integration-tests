#!/bin/bash

# Ensure that the correct number of arguments are provided
if [ "$#" -ne 2 ]; then
  echo "Usage: $0 <versionToUseForIntegrationTests> <stagingRepositoryVersion>"
  exit 1
fi

VERSION_TO_USE_FOR_INTEGRATION_TESTS="$1"
STAGING_REPOSITORY_VERSION="$2"

# Run integrationTestsServer/run - This will block until the server shuts down
echo "Starting integration tests server with version $VERSION_TO_USE_FOR_INTEGRATION_TESTS and staging version $STAGING_REPOSITORY_VERSION"
build/sbt -DversionToUseForIntegrationTests="$VERSION_TO_USE_FOR_INTEGRATION_TESTS" \
            -DstagingRepositoryVersion="$STAGING_REPOSITORY_VERSION" \
            integrationTestsServer/run &

# Capture the server's process ID (PID) to kill it later if needed
SERVER_PID=$!

# Give the server a few seconds to start (you can adjust the sleep duration as needed)
sleep 60

# Function to perform the curl command and check for success
create_catalog() {
  local retries=5
  local count=0
  local success=false
  local response

  while [ $count -lt $retries ]; do
    echo "Attempting to create Unity catalog... (Attempt $((count+1))/$retries)"
    response=$(curl -X POST \
      -H "Content-Type: application/json" \
      -d '{"name": "unity"}' \
      "http://localhost:8081/api/2.1/unity-catalog/catalogs")

    # Check if the response contains an ID, indicating success
    if [[ $response == *"\"id\":"* ]]; then
      echo "Catalog created successfully: $response"
      success=true
      break
    else
      echo "Failed to create catalog. Response: $response"
      count=$((count + 1))
      sleep 5  # Wait 5 seconds before retrying
    fi
  done

  if [ "$success" = false ]; then
    echo "Failed to create the catalog after $retries attempts."
    kill $SERVER_PID  # Kill the server if catalog creation failed
    exit 1
  fi
}

# Call the function to create the catalog
create_catalog

# Run integration tests
echo "Running integration tests..."
build/sbt -DversionToUseForIntegrationTests="$VERSION_TO_USE_FOR_INTEGRATION_TESTS" \
            -DstagingRepositoryVersion="$STAGING_REPOSITORY_VERSION" \
            integrationTests/test

# Kill the server after the tests have completed
echo "Killing the integration tests server..."
kill $SERVER_PID

# Ensure the server has been terminated
wait $SERVER_PID 2>/dev/null || echo "Server process has been terminated."
