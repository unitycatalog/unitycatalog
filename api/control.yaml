openapi: 3.0.0
servers:
  - url: http://localhost:8080/api/1.0/unity-control
    description: Localhost reference server
tags:
  - name: Users
    description: |
      A user is the identity recognized by Unity Catalog.

paths:
  /scim2/Users:
    post:
      tags:
        - Users
      operationId: createUser
      summary: Create a user
      description: |
        Creates a new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResource'
      responses:
        '200':
          description: The new user was successfully created.
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResource'
    get:
      tags:
        - Users
      parameters:
        - name: filter
          in: query
          description: Query by which the results have to be filtered.
          schema:
            type: string
          required: false
        - name: startIndex
          in: query
          description: Specifies the index of the first result. First item is number 1.
          schema:
            type: integer
            format: int32
          required: false
        - name: count
          in: query
          description: Desired number of results per page. If no count is provided, it defaults to 50.
          schema:
            type: integer
            format: int32
          required: false
      operationId: listUsers
      summary: List users
      description: |
        Gets details for all the users.
      responses:
        '200':
          description: The user list was successfully retrieved.
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResourceList'
  /scim2/Users/{id}:
    parameters:
      - name: id
        in: path
        description: The id of the user.
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      operationId: getUser
      summary: Get a user
      description: |
        Gets the specified user.
      responses:
        '200':
          description: The user was successfully retrieved.
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResource'
    put:
      tags:
        - Users
      operationId: updateUser
      summary: Update a user
      description: |
        Updates the user that matches the supplied id.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResource'
      responses:
        '200':
          description: The user was successfully updated.
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResource'
    delete:
      tags:
        - Users
      operationId: deleteUser
      summary: Delete a user
      description: |
        Deletes the user that matches the supplied id.
      responses:
        '200':
          description: The user was successfully deleted.
          content:
            application/scim+json:
              schema: {}
  /scim2/Users/self:
    get:
      tags:
        - Users
      operationId: getSelf
      summary: Get the current user
      description: |
        Gets the user from the jwt token provided.
      responses:
        '200':
          description: The user was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
  /auth/tokens:
    post:
      tags:
        - OAuth2
      operationId: getToken
      summary: Get a token using an OAuth2 flow
      description: |
        Exchange credentials for a token using the OAuth2 client credentials flow or token exchange.
      requestBody:
        required: true
        # NOTE:
        # According to the RFC (https://datatracker.ietf.org/doc/html/rfc8693#section-2), the Content-Type
        # should be `application/x-www-form-urlencoded`. However, we followed the existing implementation
        # and used `application/json`. If we switch to `application/x-www-form-urlencoded`, OpenAPI Generator
        # might generate code that depends on the `org.apache.http` package.
        content:
#          application/x-www-form-urlencoded:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthTokenExchangeRequest'
      responses:
        '200':
          $ref: '#/components/responses/OAuthTokenExchangeResponse'
  /auth/logout:
    post:
      tags:
        - OAuth2
      operationId: logout
      summary: Expire the access token
      description: |
        Exchange credentials for a token using the OAuth2 client credentials flow or token exchange.
      requestBody:
        # NOTE:
        # OAS 3.0 allows empty request bodies. In other words:
        #```
        #  requestBody:
        #    content:
        #    application/json: {}
        #```
        # should be permissible. However, due to the limitations of the OpenAPI Generator (https://github.com/OpenAPITools/openapi-generator/blob/v5.1.0/docs/generators/java.md#parameter-feature),
        # which only accepts OAS 2-style notation, this is a workaround.
        content:
          application/json:
            schema:
              type: object
              nullable: true
      responses:
        '200':
          description: The access token will be expired.

components:
  schemas:
    User:
      properties:
        id:
          description: The unique identifier of the user.
          type: string
        name:
          description: The name of the user.
          type: string
        email:
          description: The email address of the user.
          type: string
        external_id:
          description: The external identifier of the user.
          type: string
        state:
          description: The state of the account.
          type: string
          enum:
            - ENABLED
            - DISABLED
        picture_url:
          description: The URL of the user's profile picture.
          type: string
        created_at:
          description: The time the user was created.
          type: integer
          format: int64
        updated_at:
          description: The time the user was last updated.
          type: integer
          format: int64
      type: object
      required:
        - id
        - name
        - email
    UserResourceList:
      description: List of SCIM User resources.
      type: object
      properties:
        totalResults:
          description: The total number of results.
          type: integer
          format: int32
        itemsPerPage:
            description: The number of items per page.
            type: integer
            format: int32
        startIndex:
            description: The index of the first result.
            type: integer
            format: int32
        Resources:
            description: The list of User resources.
            type: array
            items:
                $ref: '#/components/schemas/UserResource'
        id:
            description: User list id metadata.
            type: string
        externalId:
            description: User list external id metadata.
            type: string
        meta:
          description: The metadata of the user.
          type: object
          properties:
            resourceType:
              type: string
            created:
              type: string
            lastModified:
              type: string
    UserResource:
      description: SCIM provides a resource type for "User" resources.
      type: object
      properties:
        id:
          description: The id of the user.
          type: string
        displayName:
          description: The name of the user.
          type: string
        externalId:
          description: The SCIM external id.
          type: string
        emails:
          description: E-mail addresses for the user.
          type: array
          items:
            $ref: '#/components/schemas/Email'
        active:
            description: The active status of the user.
            type: boolean
        meta:
          description: The metadata of the user.
          type: object
          properties:
            created:
              type: string
            lastModified:
              type: string
        photos:
          description: The photos of the user.
          type: array
          items:
            type: object
            properties:
              value:
                description: The url of the user's photo.
                type: string
    Email:
      description: SCIM email for a user.
      type: object
      properties:
        value:
          description: The email of the user.
          type: string
        primary:
          description: If the email is primary.
          type: boolean
    GrantType:
      description: |
        Grant type identifier, from RFC 8693 Section 2.
        See https://datatracker.ietf.org/doc/html/rfc8693#section-2
      type: string
      enum:
        - urn:ietf:params:oauth:grant-type:token-exchange
      # NOTE:
      # OpenAPI 3.0/2.0 do not have a way to define custom names for enum values,
      # but some tools (e.g., openapi-generator and openapi-typescript) provide
      # x-prefixed extensions for this purpose.
      x-enum-varnames:
        - TOKEN_EXCHANGE
    TokenType:
      description: |
        Token type identifier, from RFC 8693 Section 3.
        See https://datatracker.ietf.org/doc/html/rfc8693#section-3
      type: string
      enum:
        - urn:ietf:params:oauth:token-type:access_token
        - urn:ietf:params:oauth:token-type:refresh_token
        - urn:ietf:params:oauth:token-type:id_token
        - urn:ietf:params:oauth:token-type:saml1
        - urn:ietf:params:oauth:token-type:saml2
        - urn:ietf:params:oauth:token-type:jwt
      # NOTE:
      # OpenAPI 3.0/2.0 do not have a way to define custom names for enum values,
      # but some tools (e.g., openapi-generator and openapi-typescript) provide
      # x-prefixed extensions for this purpose.
      x-enum-varnames:
        - ACCESS_TOKEN
        - REFRESH_TOKEN
        - ID_TOKEN
        - SAML1
        - SAML2
        - JWT
    AccessTokenType:
      description: |
        Access token type identifier, from RFC 8693 Section 2.
        See https://datatracker.ietf.org/doc/html/rfc8693#section-2
      type: string
      enum:
        - Bearer
        - MAC
        - N_A
    OAuthTokenExchangeRequest:
      description: |
        OAuth2 token exchange request.
        See https://datatracker.ietf.org/doc/html/rfc8693
      type: object
      required:
        - grant_type
        - subject_token
        - subject_token_type
      properties:
        grant_type:
          $ref: "#/components/schemas/GrantType"
        scope:
          description: Authorization scope for client credentials or token exchange.
          type: string
        requested_token_type:
          $ref: '#/components/schemas/TokenType'
        subject_token:
          description: Subject token for token exchange request.
          type: string
        subject_token_type:
          $ref: '#/components/schemas/TokenType'
        actor_token:
          description: Actor token for token exchange request.
          type: string
        actor_token_type:
          $ref: '#/components/schemas/TokenType'
    OAuthTokenExchangeResponse:
      description: |
        OAuth2 token exchange response.
        See https://datatracker.ietf.org/doc/html/rfc8693
      type: object
      required:
        - access_token
        - issued_token_type
        - token_type
      properties:
        access_token:
          description: Access token for token exchange request.
          type: string
        issued_token_type:
          $ref: '#/components/schemas/TokenType'
        token_type:
          $ref: '#/components/schemas/AccessTokenType'
        expires_in:
          description: Lifetime of the access token in seconds for client credentials or token exchange.
          type: integer
          format: int64
        scope:
          description: Authorization scope for client credentials or token exchange.
          type: string
        refresh_token:
          description: Refresh token for client credentials or token exchange.
          type: string

info:
  title: Unity Control API
  version: '0.1'
