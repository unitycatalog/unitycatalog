/*
 * Unity Catalog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.unitycatalog.server.persist.model;

import io.unitycatalog.server.model.Privilege;

/**
 * The privilege to grant.
 *
 * <p>This enum is a superset of the privileges that can be granted in Unity Catalog and that are
 * defined in the OpenAPI specification. In the access control framework, we might express some
 * permissions in terms of privileges. Doing so, allows us to unify all access control processing
 * with a simple and unified rule syntax.
 *
 * <p>The OWNER privilege is an example of a privilege that is not defined in the OpenAPI
 * specification but expression OWNER as a privilege makes permission evaluation including ownership
 * more straight forward.
 */
public enum Privileges {
  OWNER("OWNER"),
  CREATE_CATALOG("CREATE CATALOG"),
  USE_CATALOG("USE CATALOG"),
  CREATE_SCHEMA("CREATE SCHEMA"),
  USE_SCHEMA("USE SCHEMA"),
  CREATE_TABLE("CREATE TABLE"),
  SELECT("SELECT"),
  MODIFY("MODIFY"),
  CREATE_FUNCTION("CREATE FUNCTION"),
  EXECUTE("EXECUTE"),
  CREATE_VOLUME("CREATE VOLUME"),
  READ_VOLUME("READ VOLUME"),
  CREATE_MODEL("CREATE MODEL");

  private String value;

  Privileges(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Privileges fromValue(String value) {
    for (Privileges b : Privileges.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static Privilege toPrivilege(Privileges privilege) {
    try {
      return Privilege.fromValue(privilege.getValue());
    } catch (IllegalArgumentException e) {
      return null;
    }
  }

  public static Privileges fromPrivilege(Privilege privilege) {
    try {
      return Privileges.fromValue(privilege.getValue());
    } catch (IllegalArgumentException e) {
      return null;
    }
  }
}
